// client/src/services/customerApi.js
import axios from 'axios'

const API_BASE_URL = 'http://localhost:3000/api'

// ‡∏™‡∏£‡πâ‡∏≤‡∏á axios instance
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
})

// Interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// Interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response
api.interceptors.response.use(
  (response) => {
    return response
  },
  (error) => {
    console.error('API Error:', error.response?.data || error.message)
    
    // ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (error.response?.status === 401) {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      window.location.href = '/login'
    }
    
    return Promise.reject(error)
  }
)

const customerService = {
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async getAllCustomers() {
    try {
      console.log('üîÑ Fetching all customers...')
      const response = await api.get('/customers')
      console.log('‚úÖ Customers fetched successfully:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå Error fetching customers:', error)
      throw error
    }
  },

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
  async getCustomerById(id) {
    try {
      console.log(`üîÑ Fetching customer ${id}...`)
      const response = await api.get(`/customers/${id}`)
      console.log('‚úÖ Customer fetched successfully:', response.data)
      return response.data
    } catch (error) {
      console.error(`‚ùå Error fetching customer ${id}:`, error)
      throw error
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
  async createCustomer(customerData) {
    try {
      console.log('üîÑ Creating new customer:', customerData)
      
      // ‡πÅ‡∏õ‡∏•‡∏á field names ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API
      const apiData = {
        first_name: customerData.firstName || customerData.first_name,
        last_name: customerData.lastName || customerData.last_name,
        email: customerData.email,
        phone: customerData.phone,
        address: customerData.location || customerData.address,
        id_number: customerData.id_number,
        nationality: customerData.nationality || 'Lao'
      }
      
      const response = await api.post('/customers', apiData)
      console.log('‚úÖ Customer created successfully:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå Error creating customer:', error)
      throw error
    }
  },

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async updateCustomer(id, customerData) {
    try {
      console.log(`üîÑ Updating customer ${id}:`, customerData)
      
      // ‡πÅ‡∏õ‡∏•‡∏á field names ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API
      const apiData = {
        first_name: customerData.firstName || customerData.first_name,
        last_name: customerData.lastName || customerData.last_name,
        email: customerData.email,
        phone: customerData.phone,
        address: customerData.location || customerData.address,
        id_number: customerData.id_number,
        nationality: customerData.nationality || 'Lao'
      }
      
      const response = await api.put(`/customers/${id}`, apiData)
      console.log('‚úÖ Customer updated successfully:', response.data)
      return response.data
    } catch (error) {
      console.error(`‚ùå Error updating customer ${id}:`, error)
      throw error
    }
  },

  // ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async deleteCustomer(id) {
    try {
      console.log(`üîÑ Deleting customer ${id}...`)
      const response = await api.delete(`/customers/${id}`)
      console.log('‚úÖ Customer deleted successfully:', response.data)
      return response.data
    } catch (error) {
      console.error(`‚ùå Error deleting customer ${id}:`, error)
      throw error
    }
  },

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)
  calculateStats(customers) {
    const stats = {
      total: customers.length,
      active: customers.filter(c => c.total_bookings > 0).length,
      pending: customers.filter(c => !c.email).length, // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      suspended: 0 // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ status field ‡πÉ‡∏ô DB
    }
    
    console.log('üìä Calculated customer stats:', stats)
    return stats
  },

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (filter ‡πÉ‡∏ô frontend)
  searchCustomers(customers, searchQuery, statusFilter) {
    let filtered = customers
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      filtered = filtered.filter(customer =>
        (customer.first_name && customer.first_name.toLowerCase().includes(query)) ||
        (customer.last_name && customer.last_name.toLowerCase().includes(query)) ||
        (customer.email && customer.email.toLowerCase().includes(query)) ||
        (customer.phone && customer.phone.includes(query))
      )
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° status (‡πÉ‡∏ä‡πâ total_bookings ‡πÅ‡∏ó‡∏ô)
    if (statusFilter) {
      if (statusFilter === '‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô') {
        filtered = filtered.filter(c => c.total_bookings > 0)
      } else if (statusFilter === '‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î') {
        filtered = filtered.filter(c => !c.email)
      } else if (statusFilter === '‡∫•‡∫∞‡∫á‡∫±‡∫ö') {
        filtered = filtered.filter(c => c.total_bookings === 0 && c.email)
      }
    }
    
    return filtered
  },

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Frontend ‡πÉ‡∏ä‡πâ
  transformCustomerData(apiCustomer) {
    return {
      id: apiCustomer.id,
      firstName: apiCustomer.first_name,
      lastName: apiCustomer.last_name,
      phone: apiCustomer.phone,
      email: apiCustomer.email,
      location: apiCustomer.address,
      status: this.getCustomerStatus(apiCustomer),
      registrationDate: apiCustomer.created_at,
      totalBookings: apiCustomer.total_bookings || 0,
      lastBookingDate: apiCustomer.last_booking_date,
      idNumber: apiCustomer.id_number,
      nationality: apiCustomer.nationality
    }
  },

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î status ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
  getCustomerStatus(apiCustomer) {
    if (apiCustomer.total_bookings > 0) {
      return '‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô' // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    } else if (!apiCustomer.email) {
      return '‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î' // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    } else {
      return '‡∫•‡∫∞‡∫á‡∫±‡∫ö' // ‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    }
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  async testConnection() {
    try {
      console.log('üîÑ Testing API connection...')
      const response = await api.get('/health')
      console.log('‚úÖ API connection successful:', response.data)
      return true
    } catch (error) {
      console.error('‚ùå API connection failed:', error)
      return false
    }
  }
}

export default customerService
